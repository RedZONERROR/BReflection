name: Auto Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Get latest tag and determine version bump
      id: get_version
      run: |
        git fetch --tags
        
        # Check if any tags exist
        if git describe --tags --abbrev=0 >/dev/null 2>&1; then
          LATEST_TAG=$(git describe --tags --abbrev=0)
          FIRST_RELEASE=false
        else
          LATEST_TAG="v0.0.0"
          FIRST_RELEASE=true
        fi
        
        echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
        echo "first_release=$FIRST_RELEASE" >> "$GITHUB_OUTPUT"
        
        # Get commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        if [ "$FIRST_RELEASE" = true ]; then
          # First release - start with v1.0.0
          NEW_VERSION="1.0.0"
          NEW_TAG="v1.0.0"
          BUMP_TYPE="INITIAL"
        else
          # Extract version numbers from existing tag
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Determine version bump based on commit message
          if [[ $COMMIT_MSG =~ ^BREAKING:|^feat!:|^fix!:|^MAJOR: ]]; then
            # Major version bump (breaking changes)
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            BUMP_TYPE="MAJOR"
          elif [[ $COMMIT_MSG =~ ^feat:|^MINOR: ]]; then
            # Minor version bump (new features)
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            BUMP_TYPE="MINOR"
          else
            # Patch version bump (bug fixes, default)
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
            BUMP_TYPE="PATCH"
          fi
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          NEW_TAG="v$NEW_VERSION"
        fi
        
        echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
        echo "Current version: $LATEST_TAG"
        echo "New version: $NEW_TAG ($BUMP_TYPE)"
        
    - name: Update version in build.gradle
      run: |
        sed -i "s/version = '.*'/version = '${{ steps.get_version.outputs.new_version }}'/" build.gradle
        
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build libraries
      run: ./gradlew publishToMavenLocal
      
    - name: List build artifacts
      run: |
        echo "=== Core build artifacts ==="
        ls -la core/build/libs/ || echo "No core artifacts found"
        echo "=== Compiler build artifacts ==="
        ls -la compiler/build/libs/ || echo "No compiler artifacts found"
      
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add build.gradle
        git commit -m "Auto version bump to ${{ steps.get_version.outputs.new_version }}" || exit 0
        
    - name: Create and push tag
      run: |
        git tag ${{ steps.get_version.outputs.new_tag }}
        git push origin ${{ steps.get_version.outputs.new_tag }}
        git push origin main
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.new_tag }}
        name: BReflection ${{ steps.get_version.outputs.new_tag }}
        body: |
          ## Auto Release ${{ steps.get_version.outputs.new_tag }}
          
          ### Changes
          - **${{ steps.get_version.outputs.bump_type }}** version bump from ${{ steps.get_version.outputs.latest_tag }} to ${{ steps.get_version.outputs.new_tag }}
          
          ### Installation
          ```gradle
          dependencies {
              implementation 'com.github.redzonerror.BReflection:core:${{ steps.get_version.outputs.new_version }}'
              annotationProcessor 'com.github.redzonerror.BReflection:compiler:${{ steps.get_version.outputs.new_version }}'
          }
          ```
        draft: false
        prerelease: false
        files: |
          core/build/libs/*.jar
          compiler/build/libs/*.jar
        fail_on_unmatched_files: false
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ steps.get_version.outputs.new_version }}
        path: |
          core/build/libs/
          compiler/build/libs/
          
  test-only:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build and test
      run: ./gradlew build test